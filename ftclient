#!/usr/bin/env python3

#*********************************************************************
#** Author: James G Wilson
#** Date: 5/29/2018
#** Description: ftclient
#**		 A simple file transfer client written in Python. To
#		 be used with the C program, ftclient.c.
#*********************************************************************
import sys
import socket
import struct
from time import sleep
from os import path

# minimum functions
# initiateContact
# makeRequest
# receive file functions

# Initiate contact with the server.
# Returns a connected socket.
def initiateContact(server_host, server_port):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((server_host, int(server_port)))

	return s

# Sends a message to the server.
def sendMessage(socket, message):
	message = bytes(message, encoding="UTF-8")
	socket.sendall(message)

# Sends a number to the server.
def sendNumber(socket, number):
	number = struct.pack('i', int(number))
	socket.send(number)

# Send a command to the server.
def makeRequest(server_control_socket, command, data_port):
	sendMessage(server_control_socket, command + "\0")
	sendNumber(server_control_socket, data_port)

# Receives the directory contents payload from the server.
def receiveDirectory(server_data_socket):

	# Receive the length of the upcoming content
	directory_size = server_data_socket.recv(4)
	directory_size = struct.unpack("I", directory_size)

	# Parse and print the delivered content.
	received = str(server_data_socket.recv(directory_size[0]), encoding = "UTF-8").split("\x00")

	for file_name in received:
		print(file_name)

# Receives a message from the server (most likely file name or error message).
def receiveMessage(sockfd):

	# Receive the length of the upcoming payload.
	message_size = sockfd.recv(4)
	message_size = struct.unpack("I", message_size)

	# Parse and print the delivered content.
	payload = sockfd.recv(message_size[0]).decode()
	#print(payload)

	return payload

# Receive file from server.
def receiveFile(sockfd, filename):
	file_contents = receiveMessage(sockfd)

	if path.isfile(filename):
		filename = filename.split(".")[0] + "_copy.txt"
	with open(filename, 'w') as f:
		f.write(file_contents)

def main():

	# Check for correct command line syntax.
	if len(sys.argv) < 5 or len(sys.argv) > 6:
		print("Usage ./ftclient <SERVER_HOST> <SERVER_PORT> <COMMAND> <FILENAME> <DATA_PORT>")
		exit(1)
	
	# Store and validate command line arguments.
	server_host = sys.argv[1]
	server_port = sys.argv[2]
	command = sys.argv[3]
	filename = ""
	data_port = 0

	if len(sys.argv) is 5: 
		data_port = sys.argv[4]
	elif len(sys.argv) is 6: 
		filename = sys.argv[4]
		data_port = sys.argv[5]

	if command not in ["-g", "-l"]:
		print("Invalid command. Valid commands are: -g or -l.")
		exit(1)
	
	# Establish control connection with server.
	server_control_socket = initiateContact(server_host, server_port)

	# Send command and data port to server.
	makeRequest(server_control_socket, command, data_port)

	# Depending on the command set take the appropriate action.
	if command in "-l": # Server's directory contents requested.

		# Pause for a second.
		sleep(1)

		# Establish data connection with server.
		server_data_socket = initiateContact(server_host, data_port)
		print("Receiving directory structure from " + server_host + ":" + data_port)

		# Get the directory contents payload from the server.
		receiveDirectory(server_data_socket)

		# Don't leave open sockets!
		server_data_socket.close()

	elif command in "-g": # File requested.

		# Pause for a second.
		sleep(1)

		# Get the length of the file name requested.
		filename_length = len(filename)
		print("length of filename: " + filename + ": " + str(filename_length))

		# Establish data connection with server.
		#server_data_socket = initiateContact(server_host, data_port)
		print("Requesting file: " + filename + " from " + server_host + ":" + data_port)

		# Send length of the filename first.
		sendNumber(server_control_socket, filename_length)

		# Now send the filename over.
		sendMessage(server_control_socket, filename)

		# Receive the response
		response = receiveMessage(server_control_socket)

		if response in "File not found!":
			print(response)
		elif response in "File found!":
			print(response)

			# Pause for a second.
			sleep(1)

			# Establish data connection with server.
			server_data_socket = initiateContact(server_host, data_port)
			print("Receiving file: " + filename + " from " + server_host + ":" + data_port)

			#TODO
			# Receive the requested file.
			receiveFile(server_data_socket, filename)
			print("File transfer complete!")

			# Don't leave open sockets!
			server_data_socket.close()
	
	# Don't leave open sockets.
	server_control_socket.close()

if __name__ == "__main__":

	#execute only if run as a script
	main()
